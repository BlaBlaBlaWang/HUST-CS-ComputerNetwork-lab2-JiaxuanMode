#include "stdafx.h"
#ifndef NONE_TCP_RDT_SENDER_MODE	//调整了预编译相关之后，加入这行，否则会因为包含了已经不编译的头文件带来错误
#include "Global.h"
#include "TCPRdtReceiver.h"

	TCPRdtReceiver::TCPRdtReceiver() :expectSequenceNumberRcvd(0)
	{
		lastAckPkt.acknum = -1; //初始状态下，上次发送的确认包的确认序号为-1，使得当第一个接受的数据包出错时该确认报文的确认号为-1
		lastAckPkt.checksum = 0;
		lastAckPkt.seqnum = -1;	//忽略该字段
		for (int i = 0; i < Configuration::PAYLOAD_SIZE; i++) {
			lastAckPkt.payload[i] = '.';
		}
		lastAckPkt.checksum = pUtils->calculateCheckSum(lastAckPkt);
	
		//初始状态期待接收到的报文为1号
		this->expectSequenceNumberRcvd = 0;
	}


	TCPRdtReceiver::~TCPRdtReceiver()
	{
	}

	void TCPRdtReceiver::receive(const Packet& packet) {
		//检查校验和是否正确
		int checkSum = pUtils->calculateCheckSum(packet);

		//如果校验和正确，同时收到报文的序号等于接收方期待收到的报文序号一致
		if (checkSum == packet.checksum && this->expectSequenceNumberRcvd == packet.seqnum) {
			pUtils->printPacket("接收方正确收到发送方的报文", packet);

			//取出Message，向上递交给应用层
			Message msg;
			memcpy(msg.data, packet.payload, sizeof(packet.payload));
			pns->delivertoAppLayer(RECEIVER, msg);
			
			lastAckPkt.acknum = packet.seqnum; //确认序号等于收到的报文序号
			lastAckPkt.seqnum = packet.seqnum;
			memcpy(lastAckPkt.payload, packet.payload, sizeof(packet.payload));
			lastAckPkt.checksum = pUtils->calculateCheckSum(lastAckPkt);
			pUtils->printPacket("接收方发送确认报文", lastAckPkt);
			pns->sendToNetworkLayer(SENDER, lastAckPkt);	//调用模拟网络环境的sendToNetworkLayer，通过网络层发送确认报文到对方

			this->expectSequenceNumberRcvd = (++this->expectSequenceNumberRcvd)% 8; 
			/*和发送方窗口大小对应，接收序号在0-3之间切换*/
		}
		else {
			if (checkSum != packet.checksum) {
				pUtils->printPacket("接收方没有正确收到发送方的报文,数据校验错误", packet);
			}
			else {
				pUtils->printPacket("接收方没有正确收到发送方的报文,报文序号不对", packet);
			}
			pUtils->printPacket("接收方重新发送上次的确认报文", lastAckPkt);
			pns->sendToNetworkLayer(SENDER, lastAckPkt);	//调用模拟网络环境的sendToNetworkLayer，通过网络层发送上次的确认报文

		}
	}
#endif